AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc with public, private, database subnets

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      - Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnetACDIR
          - PublicSubnetBCDIR
          - PrivateSubnetACDIR
          - PrivateSubnetBCDIR
          - DatabaseSubnetACDIR
          - DatabaseSubnetBCDIR

    ParameterLabels:
      ParameterLabel

Parameters:
  EnvironmentName:
    Default: SargeApper
    Description: Please Environment Name for this VPC
    Type: String

  VpcCIDR:
    Default: 10.33.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnetACDIR:
    Default: 10.33.0.0/24
    Description: Please enter the IP range (CIDR notation) for this Public Subnet A
    Type: String

  PublicSubnetBCDIR:
    Default: 10.33.1.0/24
    Description: Please enter the IP range (CIDR notation) for this Public Subnet B
    Type: String

  PrivateSubnetACDIR:
    Default: 10.33.10.33/24
    Description: Please enter the IP range (CIDR notation) for this Private Subnet A
    Type: String

  PrivateSubnetBCDIR:
    Default: 10.33.11.0/24
    Description: Please enter the IP range (CIDR notation) for this Private Subnet B
    Type: String

  DatabaseSubnetACDIR:
    Default: 10.33.100.0/24
    Description: Please enter the IP range (CIDR notation) for this Database Subnet A
    Type: String

  DatabaseSubnetBCDIR:
    Default: 10.33.101.0/24
    Description: Please enter the IP range (CIDR notation) for this Database Subnet B
    Type: String

Resources:
  # Create VPC
  SargeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-VPC

  # Create Internet Gateway
  SargeIG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-IG

  # Attach Internet Gateway to VPC
  IGAttachmentToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SargeIG
      VpcId: !Ref SargeVPC
  
  # Create Public Subnet A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACDIR
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicSubnetA
      - Key: Tier
        Value: Public
      VpcId: !Ref SargeVPC

  # Create Public Subnet B
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCDIR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicSubnetB
      - Key: Tier
        Value: Public
      VpcId: !Ref SargeVPC

  # Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-PublicRouteTable
      - Key: Tier
        Value: Public
      VpcId: !Ref SargeVPC

  # Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGAttachmentToVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SargeIG

  # Associate PublicSubnetA with the Public Route Table
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  # Associate PublicSubnetB with the Public Route Table
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Create Private Subnet A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref SargeVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACDIR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateSubnetA
      - Key: Tier
        Value: App

  # Create Private Subnet B
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref SargeVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCDIR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-PrivateSubnetB
      - Key: Tier
        Value: App

  # Create Database Subnet A
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref SargeVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref DatabaseSubnetACDIR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-DatabaseSubnetA
      - Key: Tier
        Value: Database

  # Create Database Subnet B
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref SargeVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref DatabaseSubnetBCDIR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-DatabaseSubnetB
      - Key: Tier
        Value: Database

  # Create Elastic IP For NAT Gateway
  NatEIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachmentToVPC
    Properties: 
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatEIP1

  # Create Elastic IP For NAT Gateway
  NatEIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachmentToVPC
    Properties: 
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NatEIP2

  # Create NAT Gateway 1
  SargeNG1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-NATGateway1

  # Create NAT Gateway 2
  SargeNG2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
      - Key: Name
        Value: !Sub ${EnvironmentName}-NATGateway2

  # Create Private Route Table 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SargeVPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-Private Routes (AZ1)
      - Key: Tier
        Value: Private

  # Create Private Route Table 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SargeVPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-Private Routes (AZ2)
      - Key: Tier
        Value: Private

  # Add a Private Route to the Route Table
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: IGAttachmentToVPC
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SargeNG1
      RouteTableId: !Ref PrivateRouteTable1

  # Add a Private Route to the Route Table
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: IGAttachmentToVPC
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SargeNG2
      RouteTableId: !Ref PrivateRouteTable2

  # Associate PrivateSubnetA with the Private Route Table
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnetA

  # Associate PrivateSubnetB with the Private Route Table
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnetB

  # Associate DatabaseSubnetA with the Database Route Table
  DatabaseSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref DatabaseSubnetA

  # Associate DatabaseSubnetB with the Database Route Table
  DatabaseSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref DatabaseSubnetB

Outputs:
  VPCId:
    Description: The VPC ID for Apper Challenge
    Value: !Ref SargeVPC
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-VpcID'

  PublicSubnetA:
    Description: The Public subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PublicSubnetA'

  PublicSubnetB:
    Description: The Public subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PublicSubnetB'

  PrivateSubnetA:
    Description: The Private subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Description: The Private subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetB'

  DatabaseSubnetA:
    Description: The Database subnet A
    Value: !Ref DatabaseSubnetA
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DatabaseSubnetA'

  DatabaseSubnetB:
    Description: The Database subnet B
    Value: !Ref DatabaseSubnetB
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DatabaseSubnetB'

  PublicSubnetACDIR:
    Description: The Public Subnet CDIR A
    Value: !Ref PublicSubnetACDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PublicSubnetACDIR'

  PublicSubnetBCDIR:
    Description: The Public Subnet CDIR B
    Value: !Ref PublicSubnetBCDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PublicSubnetBCDIR'

  PrivateSubnetACDIR:
    Description: The Private Subnet CDIR A
    Value: !Ref PrivateSubnetACDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetACDIR'

  PrivateSubnetBCDIR:
    Description: The Private Subnet CDIR B
    Value: !Ref PrivateSubnetBCDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateSubnetBCDIR'

  DatabaseSubnetACDIR:
    Description: The Database Subnet CDIR A
    Value: !Ref DatabaseSubnetACDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DatabaseSubnetACDIR'

  DatabaseSubnetBCDIR:
    Description: The Database Subnet CDIR B
    Value: !Ref DatabaseSubnetBCDIR
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DatabaseSubnetBCDIR'
